[
  {
    "path": "geography/2022-03-25-rainfalldatapost/",
    "title": "Plotting rainfall data from Australian cities",
    "description": "In this lesson, you'll learn how to read in and explore a dataset on average rainfall in Australia and create beautiful plots with ggplot.",
    "author": [],
    "date": "2022-03-25",
    "categories": [],
    "contents": "\r\n\r\nDownload zip file here\r\n\r\nFor help getting this lesson set up either in RStudio Cloud or\r\nRStudio Desktop, check out the Creating\r\na New R Project video in the Getting Started tab.\r\nBefore we start add you name to the “author” argument in the YAML on\r\nline 3 where it says “write your name here”. Also, make sure to run the\r\nfirst R chunk above (by pushing the green arrow) to load in our\r\nlibraries.\r\nLesson Objectives\r\nTo learn how to read in data\r\nTo practice viewing and exploring your data\r\nTo identify R commands needed to plot a line graph\r\nTo learn about a package called ggeasy that will help\r\nus create beautiful plots\r\nPackages used in this lesson:\r\ntidyverse\r\nggeasy\r\nSuccess Criteria:\r\nI can identify where my data is located and what type of file it\r\nis\r\nI can view my data in a new RStudio window\r\nI can see all of the different variables within my dataset\r\nI have a better understanding of what “packages” are\r\nI can produce a line plot using ggplot\r\nKeywords:\r\ncsv files\r\npackages\r\nfunctions\r\narguments\r\nOur data\r\nIn this lesson, we’re going to create a line graph to show the\r\naverage rainfall (in mm) for different cities in Australia over the past\r\n20 years. The data is freely available on github.\r\nHowever, for this lesson, I’ve cleaned the data to make it easier for us\r\nto work with.\r\nThe data is saved in a file called rainfall_clean.csv\r\nand this is the dataset we’ll be working with. Outside of R, you can try\r\nopening this file and you’ll be able to open it directly in excel. Of\r\ncourse, we will be working mostly in RStudio, but this will just give\r\nyou a quick glimpse of the data before we get started.\r\ncsv stands for “comma separated value” which is a simple text file.\r\nOften, when working with programming languages data is stored in csv\r\nfiles. Although you can also read in other types of files, like excel\r\n(XLSX) or text (TXT) files.\r\nReading in our data\r\nFirst, take a look in the Files tab in RStudio and locate the\r\nrainfall_clean.csv file.\r\nTo read in our data, we will use a read_csv(). In the\r\nconsole, type ?read_csv() to see the help documentation\r\nabout this function. No need to read through this entire Help file - I\r\njust wanted to point out how you can use the help documentation on\r\nessentially any function within RStudio.\r\nCopy the following line of R code into the read_data chunk.\r\nrainfall <- read_csv(“rainfall_clean.csv”)\r\nMake sure to run the code in read_data chunk by pressing the green\r\narrow pointing to the right.\r\nThis line of code will read in our rainfall dataset and save it as a\r\nvariable called rainfall. In the environment tab on the\r\nright, you should now be able to see the rainfall variable.\r\n\r\n\r\nrainfall <- read_csv(\"rainfall_clean.csv\")\r\n\r\n\r\n\r\nView our data\r\nTo view our data in a new tab, go to the Environment tab and click on\r\nrainfall - if you have a quick look at your console, you\r\ncan see it automatically printed View(rainfall)\r\nTo view our data in the console, simply type rainfall\r\nand run the view_data chunk. Depending on your RMarkdown settings,\r\nrunning this line of code may print your data directly below your R\r\nchunk or in the console (either works!)\r\n\r\n\r\nrainfall\r\n\r\n\r\n# A tibble: 112 × 3\r\n   city_name  year avg_rainfall\r\n   <chr>     <dbl>        <dbl>\r\n 1 Adelaide   2000        1.53 \r\n 2 Adelaide   2001        1.71 \r\n 3 Adelaide   2002        0.996\r\n 4 Adelaide   2003        1.49 \r\n 5 Adelaide   2004        1.41 \r\n 6 Adelaide   2005        1.61 \r\n 7 Adelaide   2006        0.757\r\n 8 Adelaide   2007        1.27 \r\n 9 Adelaide   2008        1.03 \r\n10 Adelaide   2009        1.34 \r\n# … with 102 more rows\r\n\r\nUnderstanding our data\r\nLooking at the output, we see the first line printed says\r\nA tibble: 112 x3. A tibble is a type of dataframe that\r\nstores our data in a convenient way. For example, it tells us the\r\ndimensions of our dataset: we have 112 rows and 3 columns. The columns\r\nrepresent our different variables and the rows represent individual\r\nobservations.\r\nWhat are the three variables?\r\n\r\n\r\n\r\nUnderneath the column names, our tibble also tells us the types of\r\nvariables we are dealing with. For example, under city_name it says\r\n which stands for a “character string”, or a string of letters.\r\nUnder year it says  which stands for double, which contains numeric\r\nvalues that may have decimal places.\r\nIf we look at the first row of our data, we learn that in the city of\r\nAdelaide in 2000 there was on average 1.53mm of rainfall.\r\nType the following 2 lines of code in the explore_data chunk.\r\nunique(rainfall\\(city_name)\r\nrange(rainfall\\)year)\r\n\r\n\r\nunique(rainfall$city_name)\r\n\r\n\r\n[1] \"Adelaide\"  \"Brisbane\"  \"Canberra\"  \"Melbourne\" \"Perth\"    \r\n[6] \"Sydney\"   \r\n\r\nrange(rainfall$year)\r\n\r\n\r\n[1] 2000 2019\r\n\r\nThe first line of code returns a list of the unique cities within our\r\ndataset. How many cities do we have in our data?\r\nThe second line of code gives us the range of years. In other words,\r\nthis tells us the minimum and maximum year. What is the range of years\r\nin our dataset?\r\nCreate a line graph\r\nPlot 1\r\nNow, we’re ready to create a line graph! The goal of this graph is to\r\nplot the average mm of rainfall for each city in our dataset from the\r\nyears 2000-2019.\r\nIn the plot1 chunk copy the following 3 lines of code:\r\nplot1 <- ggplot(rainfall, aes(x = year, y = avg_rainfall)) +\r\ngeom_line() plot1\r\n\r\n\r\nplot1 <- ggplot(rainfall, aes(x = year, y = avg_rainfall)) +\r\n  geom_line()\r\nplot1\r\n\r\n\r\n\r\n\r\nUnderstanding Plot 1\r\nWe’re creating a plot using the ggplot function and our rainfall\r\ndataset. We’re plotting year on the x axis and average rainfall on the y\r\naxis. geom_line() is a function to tell R that we want to\r\nplot a line graph.\r\nHowever, this graph isn’t quite right yet. We only have 1 line for\r\nthe entire dataset, but we really want 1 line for each of the 5\r\ncities.\r\nPlot 2\r\nIn the plot2 chunk copy the following 3 lines of code:\r\nplot2 <- ggplot(rainfall, aes(x = year, y = avg_rainfall, color =\r\ncity_name)) + geom_line() plot2\r\n\r\n\r\nplot2 <- ggplot(rainfall, aes(x = year, y = avg_rainfall, color = city_name)) +\r\n  geom_line()\r\nplot2\r\n\r\n\r\n\r\n\r\nUnderstanding Plot 2\r\nThis looks much better!\r\nHere, we just added one argument called “color” and told\r\nR we want to color the lines by the different city names.\r\nHowever, we can add a few more lines of code to make our plot even\r\nprettier.\r\nPlot 3\r\nIn the plot3 chunk copy the following 7 lines of code:\r\nplot3 <- ggplot(rainfall, aes(x = year, y = avg_rainfall, color =\r\ncity_name)) + geom_line(size = 1) + labs(x = “Year”, y = “Average\r\nRainfall (mm)”) + theme_bw() + easy_text_size(15) +\r\neasy_remove_legend_title() plot3\r\n\r\n\r\nplot3 <- ggplot(rainfall, aes(x = year, y = avg_rainfall, color = city_name)) +\r\n  geom_line(size = 1) +\r\n  labs(x = \"Year\", y = \"Average Rainfall (mm)\") +\r\n  theme_bw() +\r\n  easy_text_size(15) + \r\n  easy_remove_legend_title()\r\nplot3\r\n\r\n\r\n\r\n\r\nUnderstanding Plot 3\r\nThe first line of our code is the same as plot 2\r\nWithin geom_line() we added the size\r\nargument to make the lines on our graph a little bit thicker and easier\r\nto see\r\nThe labs() function allows us to easily change the\r\nlabels on the x and y axes\r\ntheme_bw() is one of ggplot’s default themes, which is\r\nmy personal favorite. It makes the plot a little bit cleaner\r\neasy_text_size() and\r\neasy_remove_legend_title() are two functions from the\r\nggeasy package that allow us to easily adjust the text size and remove\r\nthe legend title. In order to use these functions, you need to remember\r\nto call the ggeasy library first (like we did at the top of\r\nour script)\r\nFinally, in the plot4 chunk try changing the code from plot3 so the\r\ntext size is set to 25 and the theme is set to theme_dark() instead of\r\ntheme_bw() - can you see the differences?\r\n\r\n\r\n\r\nFinally, knit your document to see all of your beautiful plots.\r\nTHE END\r\n\r\nLicense and Citation: You can use, modify, and adapt\r\nany of the lessons, but please include the following attribution:\r\nRGirls Community. (2022, April 10). RGirls Lessons. Zenodo. https://doi.org/10.5281/zenodo.6436861\r\n\r\n\r\n\r\n\r\n",
    "preview": "geography/2022-03-25-rainfalldatapost/rainfall_plot.png",
    "last_modified": "2022-06-03T17:20:50-04:00",
    "input_file": {}
  },
  {
    "path": "geography/2022-02-26-drawingmapspost/",
    "title": "Mapping",
    "description": "This is a fun lesson using R to draw maps based on coordinates from googlemaps.",
    "author": [],
    "date": "2022-02-26",
    "categories": [],
    "contents": "\r\n\r\nDownload .Rmd here\r\nDownload word document here\r\nDownload pdf here\r\n\r\nKS3: Using Coordinates\r\nto Plot a Map in R\r\nLesson objective\r\nTo draw a map in R using coordinates\r\nPackages used in this lesson:\r\ntidyverse\r\nleaflet\r\nSuccess criteria\r\nI can find the coordinates from googlemaps and use them to draw the\r\nmap in R\r\nKeywords\r\nlatitude\r\nlongitude\r\nFinding the coordinates\r\nGo to googlemaps on the internet. Search for Green Oak Academy. Right\r\nclick on the red dot which shows the location of the school. This should\r\nshow you the coordinates. Click on the coordinates to copy them to the\r\nclipboard.\r\nPaste the coordinates here\r\nlatitude:\r\nlongitude:\r\n(Hint: The longitude coordinate will be a negative number)\r\nDrawing a map\r\nshowing the location of school\r\nNow carefully copy and paste the latitude and longitude readings into\r\nthe correct place in code chunk1 replacing the zeroes.\r\nRun the code chunk by clicking on the little arrow on the right of\r\nthe chunk.\r\n\r\n\r\nleaflet() %>%\r\n  addTiles() %>%\r\n  setView(lat = 000000, \r\n          lng = 000000,  \r\n          zoom = 20)\r\n\r\n\r\n\r\n\r\nCan you see the school on the map?\r\nNow copy and paste the school’s coordinates into chunk2 replacing the\r\nzeroes.\r\nRun the code. Can you see the school?\r\n\r\n\r\nleaflet() %>%\r\n  setView(lat = 00000, lng = 00000, zoom = 16) %>%\r\n  addProviderTiles(providers$Esri.WorldImagery)\r\n\r\n\r\n\r\n\r\nHow are the two maps different?\r\nAnswer:\r\nKnit your document and check your output file.\r\nMystery Map\r\nCopy and paste the R code from chunk2 into chunk3.\r\nReplace the coordinates with the following\r\nlatitude: 21.424931139508526 longitude: 39.82589497119249\r\nRun the code. What do you see? Answer:\r\n\r\n\r\n\r\nKnit your document and check the output file.\r\nExtension\r\nUse googlemaps to find the coordinates of Al Masjid an Nabawi.\r\nCopy the code chunk from chunk3 into chunk4 and replace the\r\ncoordinates with Al Masjid an Nabawi’s coordinates\r\n\r\n\r\n\r\nUse googlemaps to find the coordinates of Al-Aqsa Masjid,\r\nJerusalem.\r\nCopy the R code chunk from chunk3 into chunk4 and replace the\r\ncoordinates with Al-Aqsa Masjid’s coordinates.\r\n\r\n\r\n\r\nKNIT YOUR DOCUMENT for the final time. Your teacher will check your\r\nwork in the final knitted document.\r\nTHE END\r\n\r\nLicense and Citation: You can use, modify, and adapt\r\nany of the lessons, but please include the following attribution:\r\nRGirls Community. (2022, April 10). RGirls Lessons. Zenodo. https://doi.org/10.5281/zenodo.6436861\r\n\r\n\r\n\r\n\r\n",
    "preview": "geography/2022-02-26-drawingmapspost/maps_photo.png",
    "last_modified": "2022-07-18T16:40:20-04:00",
    "input_file": {}
  }
]
